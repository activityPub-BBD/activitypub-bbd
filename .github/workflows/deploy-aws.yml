name: Deployment Pipeline - Backend
env:
  AWS_REGION: af-south-1

# deploy on push to main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: "Manage AWS Resources"
    runs-on: ubuntu-latest
    outputs:
      ec2host: ${{ steps.tf_outputs.outputs.ec2host }}
    defaults:
      run:
        working-directory: terraform/infrastructure
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Capture Terraform Outputs
        id: tf_outputs
        run: |
          echo "ec2host=$(terraform output -raw ec2_ip)" >> $GITHUB_OUTPUT

  # setup-nginx:
  #   name: Deploy Certs to EC2
  #   runs-on: ubuntu-latest
  #   needs: terraform

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Fetch Parameters
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Get SSL Certs from SSM
  #       run: |
  #         mkdir -p ./tmp
  #         aws ssm get-parameter --name "/ssl/crt" --query "Parameter.Value" --output text > ./tmp/ssl_cert.crt
  #         aws ssm get-parameter --name "/ssl/privkey_pem" --query "Parameter.Value" --output text > ./tmp/ssl_key.pem

  #         aws ssm get-parameter --name "/ssl/root-ca.crt" --query "Parameter.Value" --output text > ./tmp/root-ca.crt
  #         aws ssm get-parameter --name "/ssl/case-supplier-client.crt" --query "Parameter.Value" --output text > ./tmp/case-supplier-client.crt
  #         aws ssm get-parameter --name "/ssl/case-supplier-client.key" --query "Parameter.Value" --output text > ./tmp/case-supplier-client.key

  #     - name: Create Certs Package
  #       run: |
  #         tar -czf ./certs.tar.gz -C ./tmp .

  #     - name: Copy Files to EC2
  #       uses: appleboy/scp-action@v0.1.4
  #       with:
  #         host: ${{ needs.terraform.outputs.ec2host }}
  #         username: ${{ secrets.EC2_USER }}
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         port: 22
  #         source: "certs.tar.gz"
  #         target: "/home/ec2-user/"

  #     - name: Upload SSL Certs and Configure Nginx
  #       uses: appleboy/ssh-action@v1.0.0
  #       with:
  #         host: ${{ needs.terraform.outputs.ec2host }}
  #         username: ${{ secrets.EC2_USER }}
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         port: 22
  #         script: |
  #           set -e
  #           PACKAGE="/home/ec2-user/certs.tar.gz"
  #           TEMP_DIR="/home/ec2-user/tmp"

  #           # Clean and extract certs
  #           rm -rf $TEMP_DIR
  #           mkdir -p $TEMP_DIR
  #           tar -xzf $PACKAGE -C $TEMP_DIR
  #           rm -f $PACKAGE

  #           # Move certs to secure location
  #           sudo mkdir -p /etc/ssl/casesupplier
  #           sudo mv $TEMP_DIR/ssl_cert.crt /etc/ssl/casesupplier/casesupplier_cert.crt
  #           sudo mv $TEMP_DIR/ssl_key.pem /etc/ssl/casesupplier/casesupplier_key.pem

  #           sudo mkdir -p /etc/ssl/casesupplier/mtls
  #           sudo mv $TEMP_DIR/root-ca.crt /etc/ssl/casesupplier/mtls/root-ca.crt
  #           sudo mv $TEMP_DIR/case-supplier-client.crt /etc/ssl/casesupplier/mtls/case-supplier-client.crt
  #           sudo mv $TEMP_DIR/case-supplier-client.key /etc/ssl/casesupplier/mtls/case-supplier-client.key

  #           # Set permissions
  #           sudo chmod 644 /etc/ssl/casesupplier/casesupplier_cert.crt
  #           sudo chmod 600 /etc/ssl/casesupplier/casesupplier_key.pem

  #           sudo chmod 644 /etc/ssl/casesupplier/mtls/root-ca.crt
  #           sudo chmod 644 /etc/ssl/casesupplier/mtls/case-supplier-client.crt
  #           sudo chmod 600 /etc/ssl/casesupplier/mtls/case-supplier-client.key

  #           # Configure Nginx SSL proxy
  #           sudo tee /etc/nginx/conf.d/casesupplier.conf > /dev/null <<'NGINX_CONF'
  #           server {
  #               listen 80;
  #               server_name _;
  #               return 301 https://$host$request_uri;
  #           }

  #           map $ssl_client_s_dn $is_valid_ou {
  #               default no;
  #               ~OU=sumsang-company yes;
  #               ~OU=retail-bank yes;
  #               ~OU=screen-supplier yes;
  #               ~OU=case-supplier yes;
  #               ~OU=consumer-logistics yes;
  #               ~OU=bulk-logistics yes;
  #               ~OU=commercial-bank yes;
  #               ~OU=thoh yes;
  #               ~OU=recycler yes;
  #               ~OU=electronics-supplier yes;
  #           }

  #           server {
  #               listen 444 ssl;
  #               server_name case-supplier-api.projects.bbdgrad.com;

  #               ssl_certificate /etc/letsencrypt/live/case-supplier-api.projects.bbdgrad.com/fullchain.pem;
  #               ssl_certificate_key /etc/letsencrypt/live/case-supplier-api.projects.bbdgrad.com/privkey.pem;

  #               location / {
  #                   limit_except GET OPTIONS {
  #                       deny all;
  #                   }

  #                   if ($request_method = OPTIONS) {
  #                       return 204;
  #                   }

  #                   proxy_pass http://localhost:3000;
  #                   proxy_http_version 1.1;
  #                   proxy_set_header Upgrade $http_upgrade;
  #                   proxy_set_header Connection 'upgrade';
  #                   proxy_set_header Host $host;
  #                   proxy_cache_bypass $http_upgrade;
  #                   proxy_set_header X-Real-IP $remote_addr;
  #                   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #                   proxy_set_header X-Forwarded-Proto $scheme;

  #                   add_header 'Access-Control-Allow-Origin' '*' always;
  #                   add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
  #                   add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
  #               }
  #           }

  #           server {
  #               listen 443 ssl;
  #               server_name _;

  #               ssl_certificate /etc/letsencrypt/live/case-supplier-api.projects.bbdgrad.com/fullchain.pem;
  #               ssl_certificate_key /etc/letsencrypt/live/case-supplier-api.projects.bbdgrad.com/privkey.pem;

  #               ssl_client_certificate /etc/ssl/casesupplier/mtls/root-ca.crt;
  #               ssl_verify_client on;

  #               if ($is_valid_ou = no) {
  #                   return 403;
  #               }

  #               location / {
  #                   proxy_pass http://localhost:3000;
  #                   proxy_http_version 1.1;
  #                   proxy_set_header Upgrade $http_upgrade;
  #                   proxy_set_header Connection 'upgrade';
  #                   proxy_set_header Host $host;
  #                   proxy_cache_bypass $http_upgrade;
  #                   proxy_set_header X-Real-IP $remote_addr;
  #                   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #                   proxy_set_header X-Forwarded-Proto $scheme;

  #                   # Forward client certificate info
  #                   proxy_set_header X-Client-Verify $ssl_client_verify;
  #                   proxy_set_header X-Client-Subject $ssl_client_s_dn;
  #                   proxy_set_header X-Client-Issuer $ssl_client_i_dn;
  #                   proxy_set_header X-Client-Fingerprint $ssl_client_fingerprint;
  #                   proxy_set_header X-Client-Serial $ssl_client_serial;
  #               }
  #           }
  #           NGINX_CONF

  #           # Test and reload Nginx
  #           sudo nginx -t && sudo systemctl reload nginx

  deploy-api:
    name: Build & Deploy to EC2
    runs-on: ubuntu-latest
    needs: terraform
    defaults:
      run:
        working-directory: server

    steps:
      # === Code Checkout ===
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: changing working directory
        run: npm i

      - name: Fetch Parameters
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get SSM Parameters + TF Outputs
        run: |
          EC2_HOST="${{ needs.terraform.outputs.ec2host }}"
          echo "API_HOST=$EC2_HOST" >> $GITHUB_ENV
          echo "DB_NAME=$(aws ssm get-parameter --name '/dbconfig/db_name' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "DB_URL=$(aws ssm get-parameter --name '/dbconfig/db_url' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "GOOGLE_REDIRECT_URI=$(aws ssm get-parameter --name '/google/redirect_uri' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "DOMAIN=$(aws ssm get-parameter --name 'domain' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "AWS_REGION=$(aws ssm get-parameter --name 'region' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "S3_MEDIA_BUCKET=$(aws ssm get-parameter --name 's3_media_bucketname' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "NEO4J_DATABASE=$(aws ssm get-parameter --name '/dbconfig/neo4j/database' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "NEO4J_URI=$(aws ssm get-parameter --name '/dbconfig/neo4j/uri' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "NEO4J_USERNAME=$(aws ssm get-parameter --name '/dbconfig/neo4j/username' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "NEO4J_PASSWORD=$(aws ssm get-parameter --name '/dbconfig/neo4j/password' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_ID=$(aws ssm get-parameter --name '/google/client_id' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=$(aws ssm get-parameter --name '/google/client_secret' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "AURA_INSTANCEID=$(aws ssm get-parameter --name '/dbconfig/aura/instance_id' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "AURA_INSTANCENAME=$(aws ssm get-parameter --name '/dbconfig/aura/instance_name' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "REDIS_HOST=$(aws ssm get-parameter --name '/dbconfig/redis/host' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "REDIS_PORT=$(aws ssm get-parameter --name '/dbconfig/redis/port' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "REDIS_USERNAME=$(aws ssm get-parameter --name '/dbconfig/redis/username' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=$(aws ssm get-parameter --name '/dbconfig/redis/password' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
      # === Install Dependencies ===
      - name: Install Root Dependencies
        run: npm install

      # === Build Project ===
      - name: Build Root App
        run: npm run build

      # === Package Deployment Artifacts ===
      - name: Create Deployment Package
        run: |
          mkdir -p ../build-server
          cp -r ./dist ../build-server/
          cp ./package.json ./package-lock.json ../build-server/
          tar -czf ../deploy.tar.gz -C .. build-server
          ls -la ../build-server
          rm -rf ../build-server

      # === Transfer Package to EC2 ===
      - name: Copy Files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ needs.terraform.outputs.ec2host }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "deploy.tar.gz"
          target: "/home/ec2-user/"

      # === Deploy on EC2 ===
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.terraform.outputs.ec2host }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: API_HOST, DB_NAME, DB_URL, GOOGLE_REDIRECT_URI, DOMAIN, AWS_REGION, S3_MEDIA_BUCKET, NEO4J_DATABASE, NEO4J_URI, NEO4J_USERNAME, NEO4J_PASSWORD, GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, AURA_INSTANCEID, AURA_INSTANCENAME, REDIS_HOST, REDIS_PORT, REDIS_USERNAME, REDIS_PASSWORD
          port: 22
          script: |
            set -e
            DEPLOY_DIR="/home/ec2-user/mastodon"
            PACKAGE="/home/ec2-user/deploy.tar.gz"
            # Prepare deployment directory
            rm -rf $DEPLOY_DIR
            mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR
            # Extract package and clean up
            tar -xzf $PACKAGE
            rm -f $PACKAGE
            # Install production dependencies
            cd build-server
            npm i
            cat <<EOF > dist/.env
            NODE_ENV=production
            PORT=3000
            API_HOST=$API_HOST
            DB_NAME=$DB_NAME
            DB_URL=$DB_URL
            GOOGLE_REDIRECT_URI=$GOOGLE_REDIRECT_URI
            DOMAIN=$DOMAIN
            AWS_REGION=$AWS_REGION
            S3_MEDIA_BUCKET=$S3_MEDIA_BUCKET
            NEO4J_DATABASE=$NEO4J_DATABASE
            NEO4J_URI=$NEO4J_URI
            NEO4J_USERNAME=$NEO4J_USERNAME
            NEO4J_PASSWORD=$NEO4J_PASSWORD
            GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
            GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
            AURA_INSTANCEID=$AURA_INSTANCEID
            AURA_INSTANCENAME=$AURA_INSTANCENAME
            REDIS_HOST=$REDIS_HOST
            REDIS_PORT=$REDIS_PORT
            REDIS_USERNAME=$REDIS_USERNAME
            REDIS_PASSWORD=$REDIS_PASSWORD
            EOF
            # Restart the app with PM2
            pm2 stop mastodon || true
            pm2 delete mastodon || true
            pm2 start server.js --name "mastodon" --cwd dist
            # Save PM2 process list and enable on reboot and reload nginx
            pm2 save
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user || true
